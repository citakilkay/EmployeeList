[{"C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\index.js":"1","C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\App.js":"2","C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\components\\EmployeeList.js":"3","C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\components\\Employee.js":"4","C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\contexts\\EmployeeContext.js":"5","C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\components\\AddForm.js":"6","C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\reportWebVitals.js":"7","C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\components\\EditForm.js":"8","C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\components\\Pagination.js":"9"},{"size":176,"mtime":1611770817298,"results":"10","hashOfConfig":"11"},{"size":509,"mtime":1611743976355,"results":"12","hashOfConfig":"11"},{"size":3754,"mtime":1611934924656,"results":"13","hashOfConfig":"11"},{"size":2439,"mtime":1611933560557,"results":"14","hashOfConfig":"11"},{"size":2529,"mtime":1611934037184,"results":"15","hashOfConfig":"11"},{"size":1572,"mtime":1611933602414,"results":"16","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"11"},{"size":1756,"mtime":1611766975629,"results":"18","hashOfConfig":"11"},{"size":1576,"mtime":1611913835855,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"kp5d5t",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},"C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\index.js",[],["42","43"],"C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\App.js",[],"C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\components\\EmployeeList.js",["44","45"],"import Employee from './Employee';\r\nimport {Button, Modal, Alert } from 'react-bootstrap';\r\nimport AddForm from './AddForm';\r\nimport { useContext, useEffect, useState, useRef } from 'react';\r\nimport { EmployeeContext } from '../contexts/EmployeeContext';\r\nimport Pagination from './Pagination';\r\nconst EmployeeList = () => {\r\n    const {employees} = useContext(EmployeeContext);\r\n    const [show, setShow] = useState(false);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const[currentPage, setCurrentPage] = useState(1);\r\n    const[employeesPerPage, setEmployeesPerPage] = useState(2);\r\n    const handleShow = () => setShow(true);\r\n    const handleClose = () => setShow(false);\r\n    const handleShowAlert = () => {\r\n        setShowAlert(true);\r\n        setTimeout(() => {\r\n            setShowAlert(false);\r\n        }, 3000);\r\n    };\r\n    const myRef = useRef(null);\r\n    const onButtonClick = () => {\r\n        myRef.current.focus();\r\n    }\r\n    useEffect(() => {\r\n        handleClose();\r\n        return () => handleShowAlert();\r\n    },[employees])\r\n    const indexOfLastEmployee = currentPage * employeesPerPage;\r\n    const indexOfFirstEmployee = indexOfLastEmployee - employeesPerPage;\r\n    const totalEmployeesNum = employees.length;\r\n    const currentEmployees = employees.sort((a, b) => a.name.localeCompare(b.name)).slice(indexOfFirstEmployee, indexOfLastEmployee);\r\n    const totalPagesNum = Math.ceil(employees.length / employeesPerPage);\r\n    return (\r\n        <>\r\n         <div className=\"table-title\">\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-6\">\r\n                  <h2>Manage <b>Employees</b></h2>\r\n                </div>\r\n                <div className=\"col-sm-6\">\r\n                  <Button  onClick = {handleShow} className=\"btn btn-secondary btn-outline-dark\" data-toggle=\"modal\">\r\n                    <i className=\"material-icons\">&#xE147;</i>\r\n                    <span>Add New Employee</span>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <Alert show = {showAlert} variant=\"success\">\r\n                Employee List succesfully updated!\r\n            </Alert>\r\n        <table className=\"table table-striped table-hover\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Email</th>\r\n                    <th>Address</th>\r\n                    <th>Phone</th>\r\n                    <th>Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    currentEmployees.map((employee) => (\r\n                        <tr key ={employee.id}>\r\n                            <Employee employee={employee} />\r\n                        </tr>\r\n                        \r\n                    ))\r\n                }\r\n            </tbody>\r\n        </table>\r\n        <Modal show = {show} onHide = {handleClose}>\r\n            <Modal.Header className = \"modal-header\" closeButton>\r\n                <Modal.Title>\r\n                    Add Employee\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <AddForm/>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant =\"secondary\">\r\n                    CLOSE\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n        <Pagination currentEmployees={currentEmployees} totalEmployeesNum = {totalEmployeesNum} pages = {totalPagesNum} setCurrentPage = {setCurrentPage} employeesPerPage = {employeesPerPage} />\r\n        \r\n        {/*<input type=\"text\" ref = {myRef}></input>\r\n        <button onClick = {onButtonClick}>Focus Input</button>*/}\r\n        </>\r\n    );\r\n}\r\nexport default EmployeeList;","C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\components\\Employee.js",[],"C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\contexts\\EmployeeContext.js",[],"C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\components\\AddForm.js",[],"C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\components\\EditForm.js",[],["46","47"],"C:\\Users\\ASUS\\Desktop\\koding\\coursera\\reacties\\my-app\\src\\components\\Pagination.js",["48","49","50","51"],"import {useState, useEffect} from 'react';\r\nconst Pagination = ({pages, setCurrentPage, currentEmployees, totalEmployeesNum}) => {\r\n    const numOfPages = [];\r\n    for(let i=1; i<= pages; i++) {\r\n        numOfPages.push(i);\r\n    }\r\n    const [ currentButton, setCurrentButton ] = useState(1);\r\n    useEffect(() => {\r\n        setCurrentPage(currentButton);\r\n    }, [currentButton, setCurrentPage])\r\n    return(\r\n        <div className=\"clearfix\">\r\n            <div className=\"hint-text\">Showing <b>{currentEmployees.length}</b> out of <b>{totalEmployeesNum}</b> entries</div>\r\n            <ul className=\"pagination\">\r\n                <li className={`${currentButton === 1 ? 'page-item disabled' : 'page-item' }`}>\r\n                    <a onClick = {() => setCurrentButton((prev) => prev === 1 ? prev : prev-1)} >Previous</a>\r\n                </li>\r\n                {numOfPages.map((page, index) => {\r\n                    return(\r\n                        <li className=\"page-item\" key={index} className={`${currentButton === page ? 'page-item active' : 'page-item'}`}>\r\n                            <a className=\"page-link\" onClick={() => setCurrentButton(page)}>{page}</a>\r\n                        </li>\r\n                    )\r\n                })}\r\n                <li className={`${currentButton === numOfPages.length ? 'page-item disabled' : 'page-item'}`}>\r\n                    <a onClick={() => setCurrentButton((next) => next === numOfPages.length ? next : next + 1)} >Next</a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\nexport default Pagination;",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":12,"column":29,"nodeType":"58","messageId":"59","endLine":12,"endColumn":48},{"ruleId":"56","severity":1,"message":"60","line":22,"column":11,"nodeType":"58","messageId":"59","endLine":22,"endColumn":24},{"ruleId":"52","replacedBy":"61"},{"ruleId":"54","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":16,"column":21,"nodeType":"65","endLine":16,"endColumn":98},{"ruleId":"66","severity":1,"message":"67","line":20,"column":63,"nodeType":"68","endLine":20,"endColumn":137},{"ruleId":"63","severity":1,"message":"64","line":21,"column":29,"nodeType":"65","endLine":21,"endColumn":93},{"ruleId":"63","severity":1,"message":"64","line":26,"column":21,"nodeType":"65","endLine":26,"endColumn":114},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'setEmployeesPerPage' is assigned a value but never used.","Identifier","unusedVar","'onButtonClick' is assigned a value but never used.",["69"],["70"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]